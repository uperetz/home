#!/bin/bash

declare -A servers
servers[pururia]='pururia.c.googlers.com'
servers[purtest]='purtest.c.googlers.com'

for server in "${!servers[@]}"; do
    # shellcheck disable=SC2139
    # We want this to expand
    alias "$server=ssh -Y ${servers[$server]}"
    eval function "put${server} { putserver \"${servers[$server]}\" \"\$@\"; }"
    eval function "get${server} { getserver \"${servers[$server]}\" \"\$@\"; }"
done

function setup_machine() {
  sudo apt update
  sudo apt install git
  git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
  sudo apt-get install youcompleteme
  sudo apt install glinux-vim
  # YCM Not needed
  # sudo apt install build-essential cmake vim-nox python3-dev mono-complete golang nodejs default-jdk npm
  sudo apt install google-sandman
  sudo apt install google-guitar
  sudo apt install kubectl
  sudo glinux-add-repo sendgmr
  sudo apt-get update
  sudo apt install sendgmr
  sudo apt install clangd
  sudo apt install connect-proxy
  sudo apt install gitk
  sudo apt install google-cloud-sdk
  sudo apt install google-cloud-sdk-gke-gcloud-auth-plugin
  sudo apt install python3-argcomplete
  sudo apt install python3-pandas
  sudo apt install rename
  sudo apt install setup-gke-dev
  sudo apt install shellcheck
  sudo apt install xorg
  sudo apt install parcellite
  gsettings set org.gnome.Terminal.Legacy.Keybindings:/org/gnome/terminal/legacy/keybindings/ next-tab '<Primary>Tab'
  gsettings set org.gnome.Terminal.Legacy.Keybindings:/org/gnome/terminal/legacy/keybindings/ prev-tab '<Primary><Shift>Tab'
}

function screen_server_pid() {
  pid=$PPID
  while [ "$pid" -ne 0 ]; do
    if pgrep -f -c '^SCREEN$' > /dev/null; then
      echo "$pid"
      return
    fi

   pid=$(ps -o ppid= "$pid")
  done
}

function screen_client_pts() {
  server_pid=$(screen_server_pid)
  [ -z "$server_pid" ] && return
  for pid in "/proc/${server_pid}/fd"/*; do
    l=$(readlink "$pid")
    if [[ $l =~ "pts" ]]; then
      echo "$l" | cut -d / -f 3-
      return
    fi
  done
}

function screen_client_pid() {
  pts=$(screen_client_pts)
  [ -z "$pts" ] && return
  pgrep -t "$(screen_client_pts)" -f "^screen " | awk '{print $1}'
}

function get_screen_client_env() {
  pid=$(screen_client_pid)
  [ -z "$pid" ] && return
  screen_client_env="/proc/$(screen_client_pid)/environ"
  value=$(tr '\0' '\n' <"$screen_client_env" | awk -F= "/^$1=/ {print \$2}")
  eval "export '$1=$value'"
}

function update_screen() {
  get_screen_client_env DISPLAY
  get_screen_client_env SSH_CLIENT
  get_screen_client_env SSH_AUTH_SOCK
  get_screen_client_env SSH_CONNECTION
  get_screen_client_env SSH_TTY
  gcertstatus || gcert
}

function public_wifi () {
  sudo sed -i 's/^nameserver.*/nameserver 8.8.8.8/' /etc/resolv.conf
  sudo sed -i 's/^options/# options/' /etc/resolv.conf
}

export SHELL=/bin/bash

# fig stuff
function figroot() {
  hg hgd
}

function figtail() {
  cwd=$(realpath "$PWD")
  echo "${cwd#"$(figroot)/"}"
}

function blazebin() {
  echo "$(figroot)/blaze-bin/$(figtail)"
}

function blazeout() {
  echo "$(figroot)/blaze-out/$(figtail)"
}

function blazegen() {
  echo "$(figroot)/blaze-genfiles/$(figtail)"
}

function set_workdir() {
  rm -f ~/code/workdir
  ln -s "$PWD" ~/code/workdir
}

function gcurl() {
  project=$1
  shift
  if ! gcloud projects describe "$project" 2> /dev/null; then
    echo "Failed to find project $project"
    return 1
  fi
  echo "Sending curl command: $*"
  curl -H "Authorization: Bearer $(gcloud auth print-access-token --project "$PROJECT_ID")" -H "Content-Type: application/json" "$@"
}

function f1-admin() {
  justification="$*"
  reason="manual_reason: 'bg: $justification'"
  if [ $# -gt 1 ]; then
    if [ "$1" != -span ] || [ $# -gt 2 ]; then
      echo "Usage: f1-admin [-span] 'justification string'"
      return 1
    else
      echo "Spanner mode"
      shift
      justification="$*"
      reason="$justification"
    fi
  fi
  echo "Reason: $reason"
  echo

  [ -z "$justification" ] && \
    echo "Usage: f1-admin [-span] 'justification string'" && \
    return 1
  /google/data/ro/projects/tonic/admin_session \
    --reason="$reason" \
    --transact \
    --tonic_policy=f1-user \
    --user="mdbuser/$USER" \
    --delegates=mdbuser/f1 \
    -- f1-sql \
         --f1_sql_rpc_authority_source=env \
         --f1_sql_reason="manual_reason: 'bg: $justification'"
}

# hg aliases

function hgdifff() {
  from=${1:-.~1}
  to=${2:-.}
  shift 2
  hg status --rev "$from:$to" "$@"
}

function hgmsg() {
  hg log -v -r .
}

function hgdiff() {
  from=${1:-.~1}
  to=${2:-.}
  shift 2
  hg diff --from "$from" --to "$to" "$@"
}

# Sandman and bcid

function bcid_run() {
  CL=$1
  REVIEWER=$2
  shift 2
  # Run with bcid
  ~/code/google3/monitoring/cloud_latency/scripts/cl_bcid_run --pass_resolved_version=true \
  --  "$CL" "$REVIEWER" \
  "$@"
}

export SANDBOX=//production/borg/traffic-team/templates/cloud_latency/sandbox/one_network_sandbox.gcl
function one_network_sandman() {
  cd ~/code/g3-citc || return
  sandman $SANDBOX TearDown Build Setup Start "$@"
  cd - || return
}

function one_network_sandman_update() {
  cd ~/code/g3-citc || return
  sandman $SANDBOX build
  sandman_startpcl $SANDBOX --startpcl_command push
  cd - || return
}

function one_network_sandman_prod {
  [ $# -ne 2 ] && "Need CL and reviewer" && return
  bcid_run "$1" "$2" one_network_sandman \
    --vars=use_staging_input=false,user=cloud-latency-test
}

alias cdfig=hgd
alias cdbbin='cd $(blazebin)'
alias workdir='cd $(realpath ~/code/workdir)'
alias submit='hg submit &> ~/submit.log &'

# Useful binaries
alias workflow_cli=/google/bin/releases/cep-monitoring/public/workflow_cli
alias prober_maker=/google/bin/releases/cloud-sdn-management-prod/prober_maker/prober_maker
alias gsql=/google/bin/releases/googlesql-devtools/execute_query/execute_query
alias pastebin=/google/src/head/depot/eng/tools/pastebin
alias admin_session=/google/data/ro/projects/tonic/admin_session
alias tm=/google/data/ro/teams/tenantmanager/tools/tm
alias pubsub=/google/bin/releases/goops/pubsub/pubsub
alias clean_resources='blaze run //net/fabric/monitoring/cloud_sdn_management/cep_workflows/libs:delete_resources --'
alias local_guitar='/google/data/ro/projects/testing/integrate/local_guitar.par'
alias guitar_onseshot='/google/data/ro/projects/testing/integrate/guitra_oneshot.par'
alias guitar_sandman='/google/data/ro/projects/testing/integrate/guitar_sandman'
alias g3python='/google/bin/users/joshuamorton/g3python/g3python.par'
alias cloud_traceroute="/google/data/ro/teams/network-detective/cloud_traceroute"
alias gcloud='/google/data/ro/teams/cloud-sdk/gcloud'

# Cloud variables
# export CEP_CREDENTIALS=/usr/local/google/home/pururia/cep_runner_key.json
export CEP_CREDENTIALS=/google/data/rw/teams/csdnm-1n-telemetry-probers/keystore_cred.json
# export PROJECT_ID=pur-uria-testing
#  export USE_GKE_GCLOUD_AUTH_PLUGIN=True

# gcloud completion
if [ -f /usr/lib/google-cloud-sdk/completion.bash.inc ]; then
  . /usr/lib/google-cloud-sdk/completion.bash.inc
  function alias_completion::gcloud() {
    COMP_WORDS=( "/usr/bin/gcloud" "\${COMP_WORDS[@]:1}" )
    _python_argcomplete "/usr/bin/gcloud" "$2" "$3"
  }
  complete -o default -o nospace -F alias_completion::gcloud gcloud
fi
. ~/.bash_completion_kubectl


# Need this for some reason on gLinux Desktop
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
      . /etc/bash_completion
fi

export PATH=$PATH:/usr/games
