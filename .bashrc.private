#!/bin/bash

function setup_machine() {
  sudo apt update
  sudo apt install build-essential cmake vim-nox python3-dev mono-complete golang nodejs default-jdk npm
  sudo apt install google-sandman
  sudo apt install kubectl
  sudo apt install sendgmr
  sudo apt install clangd
  sudo apt install connect-prox
  sudo apt install connect-proxy
  sudo apt install gcurl
  sudo apt install gitk
  sudo apt install google-cloud-sdk
  sudo apt install google-cloud-sdk-gke-gcloud-auth-plugin
  sudo apt install kustomize
  sudo apt install python3-argcomplete
  sudo apt install python3-pandas
  sudo apt install rename
  sudo apt install setup-gke-dev
  sudo apt install shellcheck
  sudo apt install xorg
}

function screen_server_pid() {
  pid=$PPID
  while [ $pid -ne 0 ]; do
    if pgrep -f -c '^SCREEN$' > /dev/null; then
      echo "$pid"
      return
    fi

   pid=$(ps -o ppid= $pid)
  done
}

function screen_client_pts() {
  server_pid=$(screen_server_pid)
  [ -z "$server_pid" ] && return
  for pid in "/proc/${server_pid}/fd"/*; do
    l=$(readlink "$pid")
    if [[ $l =~ "pts" ]]; then
      echo "$l" | cut -d / -f 3-
      return
    fi
  done
}

function screen_client_pid() {
  pts=$(screen_client_pts)
  [ -z "$pts" ] && return
  pgrep -t "$(screen_client_pts)" -f "^screen " | awk '{print $1}'
}

function get_screen_client_env() {
  pid=$(screen_client_pid)
  [ -z "$pid" ] && return
  screen_client_env="/proc/$(screen_client_pid)/environ"
  value=$(tr '\0' '\n' <"$screen_client_env" | awk -F= "/^$1=/ {print \$2}")
  eval "export '$1=$value'"
}

function update_screen_nocert() {
  get_screen_client_env DISPLAY
  get_screen_client_env SSH_CLIENT
  get_screen_client_env SSH_AUTH_SOCK
  get_screen_client_env SSH_CONNECTION
  get_screen_client_env SSH_TTY
}

function update_screen() {
  update_screen_nocert
  gcertstatus || gcert
}

update_screen_nocert
export SHELL=/bin/bash

# fig stuff
function figroot() {
  hg hgd
}

function figtail() {
  cwd=$(realpath "$PWD")
  echo "${cwd#"$(figroot)/"}"
}

function blazebin() {
  echo "$(figroot)/blaze-bin/$(figtail)"
}

function blazegen() {
  echo "$(figroot)/blaze-genfiles/$(figtail)"
}

function set_workdir() {
  rm -f ~/code/workdir
  ln -s "$PWD" ~/code/workdir
}

function gcurl() {
  [ -z "$PROJECT_ID" ] && echo "No PROJECT_ID set." && return
  echo -I- Running curl for "${PROJECT_ID}"
  curl -H "Authorization: Bearer $(gcloud auth print-access-token --project "$PROJECT_ID")" -H "Content-Type: application/json" "$@"
}

function f1-admin() {
  justification="$*"
  [ -z "$justification" ] && echo "Please provide justification" && return
  /google/data/ro/projects/tonic/admin_session \
    --reason="$justification" \
    --transact \
    --tonic_policy=f1-user \
    --user="mdbuser/$USER" \
    --delegates=mdbuser/f1 -- f1-sql --f1_sql_rpc_authority_source=env
}


# hg aliases

function hgdifff() {
  hg status --rev "${1:-.~1}:${2:-.}"
}

function hgmsg() {
  hg log -v -r .
}

function hgdiff() {
  hg diff --from "${1:-.~1}"
}

alias cdfig=hgd
alias cdbbin='cd $(blazebin)'
alias workdir='cd $(realpath ~/code/workdir)'

# Useful binaries
alias workflow_cli=/google/bin/releases/cep-monitoring/public/workflow_cli
alias prober_maker=/google/bin/releases/cloud-sdn-management-prod/prober_maker/prober_maker
alias gcloud=/google/data/ro/teams/cloud-sdk/gcloud # The default one is awful
alias gsql=/google/bin/releases/googlesql-devtools/execute_query/execute_query
alias pastebin=/google/src/head/depot/eng/tools/pastebin
alias admin_session=/google/data/ro/projects/tonic/admin_session
alias tm=/google/data/ro/teams/tenantmanager/tools/tm
alias pubsub=/google/bin/releases/goops/pubsub/pubsub
alias clean_resources='blaze run //net/fabric/monitoring/cloud_sdn_management/cep_workflows/libs:delete_resources --'
alias local_guitar='/google/data/ro/projects/testing/integrate/local_guitar.par'
alias guitar_onseshot='/google/data/ro/projects/testing/integrate/guitra_oneshot.par'
alias guitar_sandman='/google/data/ro/projects/testing/integrate/guitar_sandman'

# Cloud variables
# export CEP_CREDENTIALS=/usr/local/google/home/pururia/cep_runner_key.json
export CEP_CREDENTIALS=/google/data/rw/teams/csdnm-1n-telemetry-probers/keystore_cred.json
# export PROJECT_ID=pur-uria-testing

# gcloud completion
if [ -f /usr/lib/google-cloud-sdk/completion.bash.inc ]; then
  . /usr/lib/google-cloud-sdk/completion.bash.inc
  function alias_completion::gcloud() {
    COMP_WORDS=( "/usr/bin/gcloud" "\${COMP_WORDS[@]:1}" )
    _python_argcomplete "/usr/bin/gcloud" "$2" "$3"
  }
  complete -o default -o nospace -F alias_completion::gcloud gcloud
fi
. ~/.bash_completion_kubectl

# Connect to cloudtop display
alias disp='echo $DISPLAY'
function fixdisp() {
    DISPLAY=$(ls /tmp/.X11-unix)
    export DISPLAY=:${DISPLAY/X/}
}
fixdisp
