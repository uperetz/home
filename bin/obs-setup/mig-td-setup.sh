#!/bin/bash -ex

########################################
# Set up an envoy enabled MIG on a TD enabled project.
# Note the project needs the proper APIs enabled for the
# envoy injection to work. It is expected healthchecks
# have been enabled with the name $PROJECT_ID-health-check.
########################################

if [[ -z "$1" ]] || [[ "$1" =~ ^-h ]] || [[ $# -lt 3 ]]; then
    echo "-I- Usage: gke-manual-tdinject-setup.sh <project_id> <zone> <suffix>"
    exit
fi

PROJECT_ID=$1
GCP_ZONE=$2
GCP_REGION=${GCP_ZONE%-*}
SUFFIX=$3
MIG_NAME=mig-$SUFFIX
CLIENT_NAME=client-$SUFFIX
SERVICE_NAME=service-$SUFFIX
NETWORK_NAME=net-$SUFFIX
SUBNET_NAME=subnet-$SUFFIX

gcloud_cmd='/google/data/ro/teams/cloud-sdk/gcloud'
PROJECT_NUMBER=$($gcloud_cmd projects describe "$PROJECT_ID" --format="value(projectNumber)")

########################################
# Work in script dir
cd "$(dirname "$0")"
########################################

########################################
# Create network and healthcheck
$gcloud_cmd compute networks create "$NETWORK_NAME" --subnet-mode=custom
$gcloud_cmd compute networks subnets create "$SUBNET_NAME" \
  --network "$NETWORK_NAME" \
  --range "10.10.10.0/24" \
  --region "$GCP_REGION"

$gcloud_cmd compute firewall-rules create "fw-$SUFFIX" \
  --network "$NETWORK_NAME" \
  --allow=tcp:22,tcp:80,icmp

$gcloud_cmd compute health-checks create http "hc-$SUFFIX" \
  --global \
  --use-serving-port
########################################

########################################
# Create MIG server
backend_startup_script="echo Success - \$(hostname) > index.html; nohup python3 -m http.server --bind 0.0.0.0 80"
$gcloud_cmd compute instance-templates create "backend-it-$SUFFIX" \
  --region="$GCP_REGION" \
  --network="$NETWORK_NAME" \
  --subnet="$SUBNET_NAME" \
  --image-family=debian-10 \
  --image-project=debian-cloud \
  --machine-type=e2-micro \
  --no-address \
  --metadata=block-project-ssh-keys=TRUE,startup-script="${backend_startup_script}"

$gcloud_cmd compute instance-groups managed create "$MIG_NAME" \
  --zone="$GCP_ZONE" \
  --template="backend-it-$SUFFIX" \
  --size=2

$gcloud_cmd compute instance-groups managed wait-until --stable "$MIG_NAME" \
  --zone="$GCP_ZONE" --timeout=120
########################################

########################################
# Create client and service
td_endpoint="trafficdirector.googleapis"
# td_endpoint="staging-trafficdirector.sandbox.googleapis"
$gcloud_cmd compute instance-templates create "client-it-$SUFFIX" \
  --scopes=https://www.googleapis.com/auth/cloud-platform \
  --region="$GCP_REGION" \
  --network="$NETWORK_NAME" \
  --subnet="$SUBNET_NAME" \
  --image-family=debian-10 \
  --image-project=debian-cloud \
  --machine-type=e2-micro \
  --metadata=block-project-ssh-keys=TRUE,startup-script="#!/bin/bash
# Add a system user to run Envoy binaries. Login is disabled for this user
sudo adduser --system --disabled-login envoy
# Install wget to fetch TD files
sudo apt-get install wget -y
# Download and extract the Traffic Director tar.gz file
sudo wget -P /home/envoy https://storage.googleapis.com/traffic-director/traffic-director-xdsv3.tar.gz
sudo tar -xzf /home/envoy/traffic-director-xdsv3.tar.gz -C /home/envoy
sudo cat << END >> /home/envoy/traffic-director-xdsv3/sidecar.env
###
# The settings that follow were generated by the bootstrap script.
# They overwrite settings that were defined in this file previously.
###
ENVOY_USER=envoy
# Exclude the proxy user from redirection so that traffic doesn't loop back
# to the proxy
EXCLUDE_ENVOY_USER_FROM_INTERCEPT='true'
# Intercept all traffic by default
SERVICE_CIDR='*'
GCP_PROJECT_NUMBER=$PROJECT_NUMBER
VPC_NETWORK_NAME=$NETWORK_NAME
ENVOY_IMAGE='envoyproxy/envoy:v1.21.0'
ENVOY_PORT='15001'
ENVOY_ADMIN_PORT='15000'
LOG_DIR='/var/log/envoy/'
LOG_LEVEL='debug'
XDS_SERVER_CERT='/etc/ssl/certs/ca-certificates.crt'
END
sudo apt-get update --allow-releaseinfo-change -y
sudo apt-get install apt-transport-https ca-certificates curl gnupg2 software-properties-common -y
sudo curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -
sudo add-apt-repository 'deb [arch=amd64] https://download.docker.com/linux/debian buster stable' -y
sudo apt-get update -y
sudo apt-get install docker-ce -y
cd /home/envoy/traffic-director-xdsv3
# Set xDS server to staging/prod TD.
sudo sed -i 's/trafficdirector.googleapis/${td_endpoint}/' ./bootstrap_template.yaml
sudo ./run.sh start
"

$gcloud_cmd compute instance-groups managed create "$CLIENT_NAME" \
  --zone="$GCP_ZONE" \
  --template="client-it-$SUFFIX" \
  --size=1
########################################

########################################
# Create service
# WARNING: Ensure the service NEG is unique. In particular, don't leave the
# default from codelabs. It may hurt.
# After the service is created connect it to an end point, and setup the
# forwarding rule.

$gcloud_cmd compute backend-services create "$SERVICE_NAME" \
 --global \
 --load-balancing-scheme=INTERNAL_SELF_MANAGED \
 --health-checks="hc-$SUFFIX" \
 --project "$PROJECT_ID"

$gcloud_cmd compute backend-services add-backend "$SERVICE_NAME" \
 --global \
 --instance-group="$MIG_NAME" \
 --instance-group-zone="$GCP_ZONE" \
 --project="$PROJECT_ID"

$gcloud_cmd compute url-maps create "um-$SUFFIX" \
  --global\
  --default-service="$SERVICE_NAME" \
  --project="$PROJECT_ID"

$gcloud_cmd compute target-http-proxies create "proxy-$SUFFIX" \
  --url-map="um-$SUFFIX" \
  --global \
  --project="$PROJECT_ID"

$gcloud_cmd compute forwarding-rules create "fr-$SUFFIX" \
  --global \
  --network="$NETWORK_NAME" \
  --load-balancing-scheme=INTERNAL_SELF_MANAGED \
  --address=10.0.0.1 \
  --ports=80 \
  --target-http-proxy="proxy-$SUFFIX" \
  --project="$PROJECT_ID"
########################################

########################################
# Create client, and fire!
test_cmd="curl '10.0.0.1?some_request_content'"
client_vm=$(gcloud compute instance-groups list-instances "$CLIENT_NAME" --format="value(instance)" --zone="$GCP_ZONE")
echo "-I- Working on $client_vm"

$gcloud_cmd compute ssh "$client_vm" --zone="$GCP_ZONE" -- "$test_cmd"
# || $gcloud_cmd compute instance-groups managed rolling-action restart
# "$CLIENT_NAME" --zone "$GCP_ZONE"

########################################
